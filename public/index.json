
{
	"items" : [
	
		{
		  "url": "http://localhost:1313/hugo/front-page-setup/",
		  "title": "Creating a home page",
		  "img": "<no value>",
		  "content": "Home page hierarchy To create a unique layout for the homepage, you need to create a index.html file in the layouts folder. The layout from this file will be displayed on all homepages of all language versions.\nIn the absence of this file, the layout is taken from layouts/_default/list.html.\nLayout If using the baseof template, you will need to initialize it first:\nCopied\r{{ define \u0026#34;main\u0026#34; }}\r\u0026lt;-- HERE\u0026#39;S THE LAYOUT --\u0026gt;\r{{end}}\rIf, however, you just output the header and footer into separate parshals, it will be necessary to call them in the template:\nCopied\r{{partial \u0026#34;header.html\u0026#34; . }}\r{{partial \u0026#34;footer.html\u0026#34; . }}\rImportant! Use one of the approaches described above, don\u0026rsquo;t mix them.\nHTML in layout Use modern layout standards. Read more about HTML5 here.\nHugo Go code in the layout In the homepage template, as in any other template, you can use all functions and variables provided by hugo go. The most commonly used are:\nParshals. Allow you to connect any element, such as a surdider or banner Copied\r{{partial \u0026#34;banner.html\u0026#34; . }}\rLocal Fields. Unique text for each page, e.g. header Copied\r{{.Params.h1}}\rGlobal Fields. A universal site-wide value that is set in the config file Copied\r{{.Site.Params.brandname}}\rStatic Fields. Often there are labels or buttons on the site, the text of which is identical for each page, but must be translated, for this purpose i18n is used. Copied\r{{i18n \u0026#34;btn_1\u0026#34;}} Sample code of the front page\nUseful links You can read more about creating the front page in the official documentation. You can also use the ready-made clean hugo build to get started. Video on the topic "
		} ,
	
		{
		  "url": "http://localhost:1313/hugo/how-startup-hugo-site/",
		  "title": "Creating a Project on the Hogo.",
		  "img": "<no value>",
		  "content": "In this article we will consider how to create a hugo site from scratch, as well as understand the basic steps in creating a standard theme.\nIt is important to understand that themes are always created for different projects and needs, so some of the steps in these instructions may be optional, before creating a project you should always carefully read the ToR and discuss all questions and controversial issues with your team leader.\nDeploy the project After install-hugo open terminal and execute the following command:\nCopied\rhugo new site SITE NAME\rIn the SITE_NAME field specify the name of your project\nAfter successful initialization, you will receive a notification that your site has been created.\nGo into the folder and see the following structure:\nBasic structure When creating a theme, we will be working in the layuots folder.\nCreate a _default folder in the root layuots, these will be the basic templates of our project. You can learn more about template hierarchy here. In _default create templates for the list.html and single.html directory Be sure to write something (you can just put a symbol or write hello world, we will start template layout later) in html files, otherwise the template will not be readable.\nCreate a file baseof.html. As a result, we get the following structure: Working with the baseof file In the baseof.html file, expand the base structure of the html document\nMaking the structure dynamic:\nIn the html tag, in the lang attribute, enter the hugo code {{{.Language.Lang }}\nCut the content from the head tag and transfer it to a new file\nSave the new file under the path layouts/partials/head (we create folders by ourselves), we can name it arbitrarily, I will choose main.html.\nIn the baseof.html file, in the head tag, call the created file. Use the following code {{{{- partial \u0026ldquo;head/main.html\u0026rdquo; . }}\npartial is the keyword for calling modules from the partials folder, after it we specify the path to the module in quotes, then we need to put the . sign - more about passing the scope here. The - sign at the beginning of the code allows us an extra line break, it is optional.\nIn you body we write {{ block \u0026ldquo;main\u0026rdquo; . }}{{{ end }}. This will allow us to pull in content from other templates such as single and list. We get the following code:\nCustomize the parshal in the head Let\u0026rsquo;s edit the layouts/partials/head/main.html file.\nPlug in the autometa file before the title tag, it will help us to fill in the meta if it is not spelled out explicitly on the page. You can learn more about auto-meta at link. In the partials/head folder, create the autometa.html file. In the main.html file, connect it using the following code {{partial \u0026ldquo;head/autometa.html\u0026rdquo;}} Connect the alternate site links file. You can learn more about alternate links and how to connect them at link. The connection algorithm is the same as in item 1. Connect the seo file containing the main seo content. You can learn more about the seo file at link. The connection algorithm is the same as in item 1. Connect the schema file containing the main json scripts for the schema.org meta. You can learn more about the schema file at link. The connection algorithm is the same as in paragraph 1. Connect favicons. You can learn more about connecting them at link. The connection algorithm is the same as in item 1. In the title tag, call the global variable $.Scratch.Get \u0026ldquo;title \u0026ldquo;. If your project does not require an autotitle, you can make a dynamic title using the following code {{.Title}} We get the following structure:\nMeta for pagination pages Many projects need to embed navigation links for pagination pages in the head. To do this we use the following code:\nCopied\r{{- if .Paginator -}}\r{{- if .Paginator.HasPrev -}}}\r\u0026lt;link rel=\u0026#34;prev\u0026#34; href=\u0026#34;{{ .Paginator.Prev.URL | absURL }}\u0026#34;\u0026gt;\r{{- end -}}\r{{- if .Paginator.HasNext -}}\r\u0026lt;link rel=\u0026#34;next\u0026#34; href=\u0026#34;{{ .Paginator.Next.URL | absURL }}\u0026#34;\u0026gt;\r{{- end -}}\r{{- end -}}\rYou can learn more about how this code works here.\nAdd the option to close from indexing Use the following code:\nCopied\r{{$paginate := false}}\r{{- with .Paginator -}} {{- $paginate = ne .PageNumber 1 -}}\r{{- end -}}\r{{- if or (or .Page.Params.noindex $.Site.Params.noindex) ($paginate) -}}\r\u0026lt;meta name=\u0026#39;robots\u0026#39; content=\u0026#39;noindex, nofollow\u0026#39; /\u0026gt;\r{{- else -}}\r\u0026lt;meta name=\u0026#39;robots\u0026#39; content=\u0026#39;index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1\u0026#39; /\u0026gt;\r{{- end -}}\rYou can learn more about how it works here\nConnect styles and fonts There are 2 ways to connect directly in head and through site config.\nConnecting directly in head To connect directly use the following code:\nCopied\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{{`Path_to_file` | absURL}}\u0026#34;\u0026gt;\rIn the Path_to_file field, type the relative path to the css stylesheet file, starting from the root static path The absURL pip allows you to output this path absolutely taking into account the domain name, which can be specified later. Where do I put static content? All images, font files, scripts and styles are placed in the static folder in the root of the project. Let\u0026rsquo;s look at an example:\nI need to plug in the main.css file. For better support of the project structure in the future, we will observe the file system hierarchy.\nIn the static folder create the css folder, this is where our styles will be located. Put the main.css file into the created folder. In the parshall head/main.html connect the file Note that you don\u0026rsquo;t need** to include the static papac in the relative file path.\nUsing the direct half-connection in the head, you will need to prescribe each new file as you would with a normal static layout, handling its path as described above. Here\u0026rsquo;s an example of this approach at work:\nA more universal way would be to use a loop and a configuration file. Let\u0026rsquo;s consider this method below:\nConnection via site config Use the following code:\nCopied\r{{range .Site.Params.styles}}\r\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ . | absURL}}\u0026#34;\u0026gt;\r{{end}}\rThen in the config file we will connect the styles in an array, and they will be pulled into the layout automatically. Read more about configuring the config file below.\nIf you have several different types of data being connected in the head, you will need to duplicate the loop by replacing the tag inside with the actual tag, and setting a new key for the config parameter.\nAs an example, let\u0026rsquo;s create a font connection:\nCopied\r{{range .Site.Params.fonts}}\r\u0026lt;link rel=\u0026#34;preload\u0026#34; href=\u0026#34;{{ . | absURL}}\u0026#34; as=\u0026#34;font\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\r{{end}}\rThe result is the following:\nCustomize footer In the _default/baseof.html file, we connect the footer. The algorithm is exactly the same as described above. Example of my connection:\nI didn\u0026rsquo;t create a separate folder for the footer files, since I don\u0026rsquo;t plan to connect much there, so I created the footer.html file right in the partials folder.\nIn the footer file the footer itself will be built later, for now I\u0026rsquo;ll leave it empty, only connect scripts by analogy with styles in the head:\nCall baseof in theme files For the backbone of the site to be adequately rendered in the theme files, it needs to be called. Let\u0026rsquo;s connect the baseof structure to the base templates list and single. To do this, use the following code in both files:\nCopied\r{{ define \u0026#34;main\u0026#34; }}\r{{ HERE_WILL_BE_VERSE\r{{ end}}\rInstead of the THERE_WILL BE_VERSION marker, put any html code according to your task.\nConfigure the config One last thing worth mentioning is basic config customization. The config is configured in the config.toml file in the root of the project. By default we have the following structure created:\nLet\u0026rsquo;s implement a few basic elements\nbaseURL This parameter is responsible for the domain name of your site. put it there if you know it. If you plan to release to a test domain, specify it.\nBe sure to use the https protocol and a closing slash at the end to avoid unnecessary redirects.\nlanguageCode Specify the language version of the site\ntitle This is the default title for the entire site. If you use this code in the head, write a common title for all pages (if you don\u0026rsquo;t know, you can just leave empty quotation marks).\nCopied\r\u0026lt;title\u0026gt;{{.Title}}\u0026lt;/title\u0026gt;\rIf you use a parshal with a default meta and the global variable $.Scratch.Get \u0026ldquo;title \u0026ldquo;, you can delete this line and customize the default title according to the instructions here\ndefaultContentLanguage Add parameter defaultContentLanguage for multi-language sites, specify the main language of the site in it. Example:\nCopied\rdefaultContentLanguage = \u0026#34;ru\u0026#34;\rdisableHugoGeneratorInject Disables the string indicating what the site was created on. Add mandatory, set param to true:\nCopied\rdisableHugoGeneratorInject = true\rcanonifyURLs Allows to make all urls absolute, enable this parameter:\nCopied\rcanonifyURLs = true\rLanguage Options Add the following code:\nCopied\r[languages]\r[languages.ru]\rcontentDir = \u0026#34;content\u0026#34;\rlanguageName = \u0026#34;ru\u0026#34;\rweight = 1\rlanguageName - will be displayed in the html tag, in the lang attribute contentDir - specify the path to the content of the corresponding language version, if the language is the same, then specify the path to the content folder. weight - language priority, may be required in a number of cases described in article about creating language versions. Lock the site from the index During development on the test site it is necessary to close the site from nindexing, the code implemented above allows you to do this. To close the site globally, in the config we write the following:\nCopied\r[params]\rnoindex = true\rWe get the following basic config file:\nIn the course of work with the site you will add more and more new elements, expanding both the config file and the structure of templates. For further work it is recommended to familiarize yourself with the following articles:\nCreating and customizing the home page file - index.html Creating and customizing the default directory file - list.html Create and customize default post file - single.html Content and work with it You can also find the code for this project on the github repositories.\n"
		} ,
	
		{
		  "url": "http://localhost:1313/hugo/kak-zapustit-multilang/",
		  "title": "How to start a multilang",
		  "img": "<no value>",
		  "content": "To deploy a multilang site you need:\nIn the config. Specify the default language of the site Copied\rdefaultContentLanguage = \u0026#34;SLAG\u0026#34;\rCreate a languages section and add as many languages as you want there Copied\r[languages]\r[languages.en]\rcontentDir = \u0026#34;content/en\u0026#34;\rlanguageName = \u0026#34;en\u0026#34;\r[languages.ru]\rcontentDir = \u0026#34;content/en\u0026#34;\rlanguageName = \u0026#34;ru\u0026#34;\r[languages.ua]\rcontentDir = \u0026#34;content/ua\u0026#34;\rlanguageName = \u0026#34;ua\u0026#34;\rlanguageName - language slug contentDir - path to the folder with language content Translating fields through i18n Create i18n folder in the project root. Add to it yaml file named by language slang: *LANG.yaml Throw in all fields needed for translation according to the key-value scheme. Copied\r- id: \u0026#34;KEY_IN_VERSION\u0026#34;\rtranslation: \u0026#34;TRANSLATION\u0026#34;\rContent In the content folder, create the desired number of folders by the name of the language syllable Add translated content there Language menu Design the language menu wrap it in a hugo loop Pages with no translations in the folders will not be displayed in the language menu.\nYou can use clean theme to run a multi-language site.\n"
		} ,
	
		{
		  "url": "http://localhost:1313/hugo/single-page-setup/",
		  "title": "Creating a default post file (single page)",
		  "img": "<no value>",
		  "content": "All internal pages in hugo are of type single and by default use the single template from the _default folder. Read more about template hierarchy and how to override the default template for a specific page type.\nWhat content is displayed on pages of type single? All markdown files that are named and stored in the content folder or subfolders will be of type single.\nFor example, this article is located in the dev folder and is named single-page-setup.md, so it will pull the _default/single template. You can read about other content types here.\nInitializing the default template To make the template work you need to perform 2 steps:\nCreate a single.html file in the layouts/_default folder. Fill it with any content Typically, such a template is filled with html layout, and shortcodes. If you use the baseof file, don\u0026rsquo;t forget to initialize it in the template using {{ define \u0026ldquo;main\u0026rdquo; }}, if you don\u0026rsquo;t, you\u0026rsquo;ll probably need to plug in the header and footer modules. As an example, here is the code for the current page:\nCopied\r{{ define \u0026#34;main\u0026#34; }}\r\u0026lt;main class=\u0026#34;has_sidebar\u0026#34;\u0026gt;\r\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt;\r\u0026lt;h1\u0026gt;{{.Params.h1}}\u0026lt;/h1\u0026gt;\r{{.Content}}\t\u0026lt;/div\u0026gt;\r{{partial \u0026#34;sidebar.html\u0026#34; . }}\r\u0026lt;/main\u0026gt;\r{{end}}\rMethod Params.KEY - calls a special parameter from the macrdown file. Read more about macrodownfile structure here. The Content method pulls all other content from the file. {{partial \u0026ldquo;sidebar.html\u0026rdquo; . }} - connects the sidebar. Since a sidebar is not planned on every page type, I only call this in the single.html file. All styles and scripts for this project are specified in the site config, more details here:\nDisplay article title Hugo provides automatic generation of article content, the so-called table of content, more details here.\nTo connect content to the project use the following code\nCopied\r{{ .TableOfContents }}\rYou can customize and customize the content. This is done through a config file. Example customization code:\nCopied\r[markup]\r[markup.tableOfContents]\rendLevel = 3\rordered = true\rstartLevel = 2\rstartLevel - specifies from which header level the content will be started. The default setting is 1 - h1 header. endLevel - specifies at what level of nesting of headers the rendering of the content should be stopped. For example, if the value 3 is specified, then headings of the level below (h4, h5, h6) will not be included in the content. ordered - if true is specified, the list will be numbered, otherwise it will be labeled (default value). Link to original - here.\n"
		} ,
	
		{
		  "url": "http://localhost:1313/search/",
		  "title": "<no value>",
		  "img": "<no value>",
		  "content": ""
		} 
	
	]
}